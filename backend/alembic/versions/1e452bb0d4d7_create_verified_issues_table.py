"""create verified_issues table

Revision ID: 1e452bb0d4d7
Revises: 9af1cc52845d
Create Date: 2025-09-18 21:07:46.002187

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2



# revision identifiers, used by Alembic.
revision: str = '1e452bb0d4d7'
down_revision: Union[str, Sequence[str], None] = '9af1cc52845d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('verified_issues',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('complaint_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('priority', sa.String(length=50), nullable=True),
    sa.Column('location', geoalchemy2.types.Geography(geometry_type='POINT', srid=4326, dimension=2, from_text='ST_GeogFromText', name='geography'), nullable=True),
    sa.Column('locationName', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('complaint_id')
    )
    # op.create_index('idx_verified_issues_location', 'verified_issues', ['location'], unique=False, postgresql_using='gist')
    op.execute(
    "CREATE INDEX IF NOT EXISTS idx_verified_issues_location ON verified_issues USING gist (location)")
    op.create_index(op.f('ix_verified_issues_id'), 'verified_issues', ['id'], unique=False)
    # ### end Alembic commands ###



def downgrade():
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    if 'verified_issues' in inspector.get_table_names():
        # Drop index if it exists
        if 'ix_verified_issues_id' in [idx['name'] for idx in inspector.get_indexes('verified_issues')]:
            op.drop_index('ix_verified_issues_id', table_name='verified_issues')
        # Drop table
        op.drop_table('verified_issues')
